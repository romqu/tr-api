/*
 * This file is generated by jOOQ.
 */
package de.romqu.trdesktopapi.public_.tables;


import de.romqu.trdesktopapi.public_.Keys;
import de.romqu.trdesktopapi.public_.PublicEntity;
import de.romqu.trdesktopapi.public_.tables.records.SessionRecordEntity;
import org.jetbrains.annotations.NotNull;
import org.jooq.Record;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.util.Arrays;
import java.util.List;
import java.util.UUID;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class SessionEntity extends TableImpl<SessionRecordEntity> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.session</code>
     */
    public static final SessionEntity SESSION = new SessionEntity();

    /**
     * The class holding records for this type
     */
    @Override
    @NotNull
    public Class<SessionRecordEntity> getRecordType() {
        return SessionRecordEntity.class;
    }

    /**
     * The column <code>public.session.id</code>.
     */
    public final TableField<SessionRecordEntity, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.session.uuid_id</code>.
     */
    public final TableField<SessionRecordEntity, UUID> UUID_ID = createField(DSL.name("uuid_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.session.device_id</code>.
     */
    public final TableField<SessionRecordEntity, UUID> DEVICE_ID = createField(DSL.name("device_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.session.token</code>.
     */
    public final TableField<SessionRecordEntity, String> TOKEN = createField(DSL.name("token"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>public.session.refresh_token</code>.
     */
    public final TableField<SessionRecordEntity, String> REFRESH_TOKEN = createField(DSL.name("refresh_token"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>public.session.tracking_id</code>.
     */
    public final TableField<SessionRecordEntity, String> TRACKING_ID = createField(DSL.name("tracking_id"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>public.session.reset_process_id</code>.
     */
    public final TableField<SessionRecordEntity, UUID> RESET_PROCESS_ID = createField(DSL.name("reset_process_id"), SQLDataType.UUID, this, "");

    /**
     * The column <code>public.session.keypair_id</code>.
     */
    public final TableField<SessionRecordEntity, Long> KEYPAIR_ID = createField(DSL.name("keypair_id"), SQLDataType.BIGINT.nullable(false), this, "");

    private SessionEntity(Name alias, Table<SessionRecordEntity> aliased) {
        this(alias, aliased, null);
    }

    private SessionEntity(Name alias, Table<SessionRecordEntity> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.session</code> table reference
     */
    public SessionEntity(String alias) {
        this(DSL.name(alias), SESSION);
    }

    /**
     * Create an aliased <code>public.session</code> table reference
     */
    public SessionEntity(Name alias) {
        this(alias, SESSION);
    }

    /**
     * Create a <code>public.session</code> table reference
     */
    public SessionEntity() {
        this(DSL.name("session"), null);
    }

    public <O extends Record> SessionEntity(Table<O> child, ForeignKey<O, SessionRecordEntity> key) {
        super(child, key, SESSION);
    }

    @Override
    @NotNull
    public Schema getSchema() {
        return PublicEntity.PUBLIC;
    }

    @Override
    @NotNull
    public Identity<SessionRecordEntity, Long> getIdentity() {
        return (Identity<SessionRecordEntity, Long>) super.getIdentity();
    }

    @Override
    @NotNull
    public UniqueKey<SessionRecordEntity> getPrimaryKey() {
        return Keys.SESSION_PKEY;
    }

    @Override
    @NotNull
    public List<UniqueKey<SessionRecordEntity>> getKeys() {
        return Arrays.<UniqueKey<SessionRecordEntity>>asList(Keys.SESSION_PKEY, Keys.SESSION_UUID_ID_KEY, Keys.SESSION_DEVICE_ID_KEY, Keys.SESSION_TOKEN_KEY, Keys.SESSION_REFRESH_TOKEN_KEY, Keys.SESSION_TRACKING_ID_KEY, Keys.SESSION_RESET_PROCESS_ID_KEY, Keys.SESSION_KEYPAIR_ID_KEY);
    }

    @Override
    @NotNull
    public List<ForeignKey<SessionRecordEntity, ?>> getReferences() {
        return Arrays.<ForeignKey<SessionRecordEntity, ?>>asList(Keys.SESSION__FK_SESSION_KEYPAIR);
    }

    private transient KeypairEntity _keypair;

    public KeypairEntity keypair() {
        if (_keypair == null)
            _keypair = new KeypairEntity(this, Keys.SESSION__FK_SESSION_KEYPAIR);

        return _keypair;
    }

    @Override
    @NotNull
    public SessionEntity as(String alias) {
        return new SessionEntity(DSL.name(alias), this);
    }

    @Override
    @NotNull
    public SessionEntity as(Name alias) {
        return new SessionEntity(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    @NotNull
    public SessionEntity rename(String name) {
        return new SessionEntity(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    @NotNull
    public SessionEntity rename(Name name) {
        return new SessionEntity(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    @NotNull
    public Row8<Long, UUID, UUID, String, String, String, UUID, Long> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
