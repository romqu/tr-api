/*
 * This file is generated by jOOQ.
 */
package de.romqu.trdesktopapi.public_.tables;


import de.romqu.trdesktopapi.public_.Keys;
import de.romqu.trdesktopapi.public_.PublicEntity;
import de.romqu.trdesktopapi.public_.tables.records.KeypairRecordEntity;

import java.util.Arrays;
import java.util.List;

import org.jetbrains.annotations.NotNull;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class KeypairEntity extends TableImpl<KeypairRecordEntity> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.keypair</code>
     */
    public static final KeypairEntity KEYPAIR = new KeypairEntity();

    /**
     * The class holding records for this type
     */
    @Override
    @NotNull
    public Class<KeypairRecordEntity> getRecordType() {
        return KeypairRecordEntity.class;
    }

    /**
     * The column <code>public.keypair.id</code>.
     */
    public final TableField<KeypairRecordEntity, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.keypair.private_key</code>.
     */
    public final TableField<KeypairRecordEntity, byte[]> PRIVATE_KEY = createField(DSL.name("private_key"), SQLDataType.BLOB.nullable(false), this, "");

    /**
     * The column <code>public.keypair.public_key</code>.
     */
    public final TableField<KeypairRecordEntity, byte[]> PUBLIC_KEY = createField(DSL.name("public_key"), SQLDataType.BLOB.nullable(false), this, "");

    private KeypairEntity(Name alias, Table<KeypairRecordEntity> aliased) {
        this(alias, aliased, null);
    }

    private KeypairEntity(Name alias, Table<KeypairRecordEntity> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.keypair</code> table reference
     */
    public KeypairEntity(String alias) {
        this(DSL.name(alias), KEYPAIR);
    }

    /**
     * Create an aliased <code>public.keypair</code> table reference
     */
    public KeypairEntity(Name alias) {
        this(alias, KEYPAIR);
    }

    /**
     * Create a <code>public.keypair</code> table reference
     */
    public KeypairEntity() {
        this(DSL.name("keypair"), null);
    }

    public <O extends Record> KeypairEntity(Table<O> child, ForeignKey<O, KeypairRecordEntity> key) {
        super(child, key, KEYPAIR);
    }

    @Override
    @NotNull
    public Schema getSchema() {
        return PublicEntity.PUBLIC;
    }

    @Override
    @NotNull
    public Identity<KeypairRecordEntity, Long> getIdentity() {
        return (Identity<KeypairRecordEntity, Long>) super.getIdentity();
    }

    @Override
    @NotNull
    public UniqueKey<KeypairRecordEntity> getPrimaryKey() {
        return Keys.KEYPAIR_PKEY;
    }

    @Override
    @NotNull
    public List<UniqueKey<KeypairRecordEntity>> getKeys() {
        return Arrays.<UniqueKey<KeypairRecordEntity>>asList(Keys.KEYPAIR_PKEY, Keys.KEYPAIR_PRIVATE_KEY_KEY, Keys.KEYPAIR_PUBLIC_KEY_KEY);
    }

    @Override
    @NotNull
    public KeypairEntity as(String alias) {
        return new KeypairEntity(DSL.name(alias), this);
    }

    @Override
    @NotNull
    public KeypairEntity as(Name alias) {
        return new KeypairEntity(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    @NotNull
    public KeypairEntity rename(String name) {
        return new KeypairEntity(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    @NotNull
    public KeypairEntity rename(Name name) {
        return new KeypairEntity(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    @NotNull
    public Row3<Long, byte[], byte[]> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
